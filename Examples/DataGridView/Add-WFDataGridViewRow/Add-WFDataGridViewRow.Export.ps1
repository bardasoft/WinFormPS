#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: f7c89b20-6eb8-46f5-8bd8-2bdd4e97df8f
# Source File: Add-WFDataGridViewRow.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
jQsAAB+LCAAAAAAABAC9Vu9v2jAQ/T5p/0Pkzykk/CgghUiQjXVat1WF0X6rnOSgHo5dOQ6Q/fW7
EOigaUdABUWK4uTsd+/eu1OcWwjkHFT6iWpq4EPMpOiSGnE/fjAM56diUyYoHzAOP2gEbi8ML+4G
WfAXxcIxg8WtXFSe4olTLcTmJ/i/IdCGTp+gS4ZprCGq3DERykVcGUgV5XfTeO2TaYzXCTUqVnaZ
hpdwnSjoCki0otw0bhKfs+AbpCM5A9H1Wy3aDJqXdqfeAKvdIYbAVLpkgufZxAgeGQ8VxhFPCq0k
j3OimOiNkk+gdLre4HEGQg/ZHyBus1Yzjdql7VQ3QW9symgTd4W1N3YES03cjGcx9PMcsddx15KG
6zMfsmenuvq6Cd1f3wyoL5cnL7FGHF8u/1vlYhmuZUA14hPXtupY5XqjUI636rwBLLEh17FhtRDB
KhE/ov5XEcKSuLUy0bmUiopAsvjins4ZKNOj2pwskV1R32quWnkN+4nWUpxcQn8Fgz2OTX20jFmv
1MuULVdxG7O0ku1mBnKQkGVskguJuRjlkvkVw5jFCeVDnXLo02DmSS4VcUcqgdf2bzc2Tphgtsv/
YfXuRYcfbJbt6Xxyy4QINkUwtPziwNbHWiWRuAIaYjJXwKaPq3n7XYaocC/RMluVUGHXe3Z56+3k
Xn6KdNpoPrvMnPrnvuLQ2dF1d9GLY4iw+hBvYtdvUjeKA6k4899BQaf6fOpLlNwz58B4d1/uR8za
4zxAii6YmB6DZdUnzUlrYtth06J1uh/rPuLn4cQU2lSqdAhqzgI4SrKD2XlSwVnorVlhqyK1E3B7
Xua97VS3f7/dv/fu3P2NCwAA#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.117
     Generated on:       2016-03-24 3:52 PM
     Generated by:        
     Organization:        
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2016
#>
#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-Add-WFDataGridViewRow_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$buttonAddRow = New-Object 'System.Windows.Forms.Button'
	$datagridview1 = New-Object 'System.Windows.Forms.DataGridView'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$form1_Load = {
		# Add examples columns
		Add-WFDataGridViewColumn -DataGridView $datagridview1 -ColumnName "First Name", "Last Name", "SamAccountName"
	}
	
	
	function Add-WFDataGridViewColumn
	{
	<#
	.SYNOPSIS
		This function add a column to a DataGridView
	.DESCRIPTION
		This function add a column to a DataGridView
	.EXAMPLE
		Add-WFDataGridViewColumn -DataGridView $datagridview1 -ColumnName $($textbox1.Text -split "," -replace '^\s+', '' -replace '\s+$', '')
	.EXAMPLE
		Add-WFDataGridViewColumn -DataGridView $datagridview1 -ColumnName "First Name","Last Name","SamAccountName","Description"
	.NOTES
		Francois-Xavier Cat
		www.lazywinadmin.com
		@lazywinadm
		github.com/lazywinadmin
	#>
		[CmdletBinding()]
		PARAM (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			
			[String[]]$ColumnName
		)
		BEGIN
		{
			Add-Type -AssemblyName System.Windows.Forms
		}
		PROCESS
		{
			foreach ($Column in $ColumnName)
			{
				
				# Create Column object
				$NewColumn = New-Object -TypeName System.Windows.Forms.DataGridViewTextBoxColumn
				$NewColumn.Name = $Column
				$NewColumn.HeaderText = $Column
				
				# Add the Column to the Datagridview
				$DataGridView.Columns.Add($NewColumn)
			}
		}
	} #Add-WFDataGridViewColumn
	
	function Add-WFDataGridViewRow
	{
	<#
		.SYNOPSIS
			This function add a row to a DataGridView
		
		.DESCRIPTION
			This function add a row to a DataGridView
		
		.PARAMETER DataGridView
			Specifies the DataGridView Control to use
		
		.PARAMETER Title
			Specifies the Title to set on the new row
		
		.PARAMETER Values
			Specities the values to add
		
		.PARAMETER Collection
			Specifies the number of column to add
		
		.EXAMPLE
			Add-WFDataGridViewRow -DataGridView $datagridview1 -Title "Name1" -Values ($textbox1.Text -split ",")
		
			Add a new row with the Title 'Name1' and the values from $textbox1
			
		.EXAMPLE
			Add-WFDataGridViewRow -DataGridView $datagridview1
		
			Add an empty row
		
		.EXAMPLE
			Add-WFDataGridViewRow -DataGridView $datagridview1 -Collection 3
		
			Add 3 empty rows
		
		.EXAMPLE
			Add-WFDataGridViewRow -DataGridView $datagridview1 -Values "Francois-Xavier","Cat","fxcat"
		
			Add a row with the values specified.
		
		.NOTES
			Francois-Xavier Cat
			www.lazywinadmin.com
			@lazywinadm
			github.com/lazywinadmin
	#>
		
		[CmdletBinding(DefaultParameterSetName = 'EmptyRow')]
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.DataGridView]$DataGridView,
			
			[Parameter(ParameterSetName = 'Row',
					   Mandatory = $true)]
			[String]$Title,
			
			[Parameter(ParameterSetName = 'Row')]
			[Array]$Values,
			
			[Parameter(ParameterSetName = 'Collection',
					   Mandatory = $true)]
			[int32]$Collection
		)
		
		BEGIN
		{
			Add-Type -AssemblyName System.Windows.Forms
		}
		PROCESS
		{
			IF ($PSCmdlet.ParameterSetName -eq 'EmptyRow')
			{
				$DataGridView.Rows.Add()
			}
			ELSEIF ($PSCmdlet.ParameterSetName -eq 'Row')
			{
				$Row = New-Object -TypeName System.Windows.Forms.DataGridViewRow
				$Row.HeaderCell.Value = $Title
				$Row.CreateCells($DataGridView, $Values)
				
				# Add the row
				$DataGridView.Rows.Add($Row)
				
			}
			ELSEIF ($PSCmdlet.ParameterSetName -eq 'Collection')
			{
				$DataGridView.Rows.Add($Collection)
			}
		}
	}
	
	$buttonAddRow_Click = {
		if ($textbox1.Text)
		{
			#Add row 'Name1'
			Add-WFDataGridViewRow -DataGridView $datagridview1 -Title "Name1" -Values ($textbox1.Text -split ",")
			
			#Add Empty Row
			#Add-WFDataGridViewRow -DataGridView $datagridview1
			
			#Add Multiple Empty Row
			#Add-WFDataGridViewRow -DataGridView $datagridview1 -Collection 3
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonAddRow.remove_Click($buttonAddRow_Click)
			$form1.remove_Load($form1_Load)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form1.SuspendLayout()
	#
	# form1
	#
	$form1.Controls.Add($textbox1)
	$form1.Controls.Add($buttonAddRow)
	$form1.Controls.Add($datagridview1)
	$form1.ClientSize = '522, 261'
	$form1.Name = 'form1'
	$form1.Text = 'Form'
	$form1.add_Load($form1_Load)
	#
	# textbox1
	#
	$textbox1.Location = '103, 234'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '407, 20'
	$textbox1.TabIndex = 2
	$textbox1.Text = 'Francois-Xavier,Cat,fxcat'
	#
	# buttonAddRow
	#
	$buttonAddRow.Location = '12, 232'
	$buttonAddRow.Name = 'buttonAddRow'
	$buttonAddRow.Size = '85, 23'
	$buttonAddRow.TabIndex = 1
	$buttonAddRow.Text = 'Add Row'
	$buttonAddRow.UseVisualStyleBackColor = $True
	$buttonAddRow.add_Click($buttonAddRow_Click)
	#
	# datagridview1
	#
	$datagridview1.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview1.Location = '12, 12'
	$datagridview1.Name = 'datagridview1'
	$datagridview1.Size = '498, 214'
	$datagridview1.TabIndex = 0
	$form1.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $form1.ShowDialog()

} #End Function

#Call the form
Call-Add-WFDataGridViewRow_psf | Out-Null
